datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  role String @default("member")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tour {
  id               Int      @id @default(autoincrement())
  name             String
  descriptionShort String?
  imageLink        String?
  steps            Step[]
  city             City     @relation(fields: [cityId], references: [id])
  cityId           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Step {
  id          Int      @id @default(autoincrement())
  name        String
  weight      Int
  audioLink   String?
  description String?
  imageLink   String?
  isFree      Boolean  @default(false)
  tour        Tour     @relation(fields: [tourId], references: [id])
  tourId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([weight, tourId])
}

model City {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  country   Country  @relation(fields: [countryId], references: [id])
  countryId Int
  tours     Tour[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cities    City[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
